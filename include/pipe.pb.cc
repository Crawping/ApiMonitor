// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pipe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Init_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Init_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApiFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApiFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleApis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleApis_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleApis_ApiDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleApis_ApiDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApiInvoked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApiInvoked_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pipe_2eproto() {
  protobuf_AddDesc_pipe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pipe.proto");
  GOOGLE_CHECK(file != NULL);
  Init_descriptor_ = file->message_type(0);
  static const int Init_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, dummy_),
  };
  Init_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Init_descriptor_,
      Init::default_instance_,
      Init_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Init));
  ModuleFilter_descriptor_ = file->message_type(1);
  static const int ModuleFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFilter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFilter, filter_),
  };
  ModuleFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleFilter_descriptor_,
      ModuleFilter::default_instance_,
      ModuleFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleFilter));
  ApiFilter_descriptor_ = file->message_type(2);
  static const int ApiFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiFilter, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiFilter, api_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiFilter, filter_),
  };
  ApiFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApiFilter_descriptor_,
      ApiFilter::default_instance_,
      ApiFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApiFilter));
  ModuleApis_descriptor_ = file->message_type(3);
  static const int ModuleApis_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis, apis_),
  };
  ModuleApis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleApis_descriptor_,
      ModuleApis::default_instance_,
      ModuleApis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleApis));
  ModuleApis_ApiDetail_descriptor_ = ModuleApis_descriptor_->nested_type(0);
  static const int ModuleApis_ApiDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis_ApiDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis_ApiDetail, va_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis_ApiDetail, rva_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis_ApiDetail, forward_),
  };
  ModuleApis_ApiDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleApis_ApiDetail_descriptor_,
      ModuleApis_ApiDetail::default_instance_,
      ModuleApis_ApiDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis_ApiDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleApis_ApiDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleApis_ApiDetail));
  ApiInvoked_descriptor_ = file->message_type(4);
  static const int ApiInvoked_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiInvoked, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiInvoked, api_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiInvoked, action_),
  };
  ApiInvoked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApiInvoked_descriptor_,
      ApiInvoked::default_instance_,
      ApiInvoked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiInvoked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApiInvoked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApiInvoked));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pipe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Init_descriptor_, &Init::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleFilter_descriptor_, &ModuleFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApiFilter_descriptor_, &ApiFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleApis_descriptor_, &ModuleApis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleApis_ApiDetail_descriptor_, &ModuleApis_ApiDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApiInvoked_descriptor_, &ApiInvoked::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pipe_2eproto() {
  delete Init::default_instance_;
  delete Init_reflection_;
  delete ModuleFilter::default_instance_;
  delete ModuleFilter_reflection_;
  delete ApiFilter::default_instance_;
  delete ApiFilter_reflection_;
  delete ModuleApis::default_instance_;
  delete ModuleApis_reflection_;
  delete ModuleApis_ApiDetail::default_instance_;
  delete ModuleApis_ApiDetail_reflection_;
  delete ApiInvoked::default_instance_;
  delete ApiInvoked_reflection_;
}

void protobuf_AddDesc_pipe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npipe.proto\"\025\n\004Init\022\r\n\005dummy\030\001 \001(\005\",\n\014M"
    "oduleFilter\022\014\n\004name\030\001 \001(\t\022\016\n\006filter\030\002 \001("
    "\010\"B\n\tApiFilter\022\023\n\013module_name\030\001 \001(\t\022\020\n\010a"
    "pi_name\030\002 \001(\t\022\016\n\006filter\030\003 \001(\010\"\213\001\n\nModule"
    "Apis\022\023\n\013module_name\030\001 \001(\t\022#\n\004apis\030\002 \003(\0132"
    "\025.ModuleApis.ApiDetail\032C\n\tApiDetail\022\014\n\004n"
    "ame\030\001 \001(\t\022\n\n\002va\030\002 \001(\003\022\013\n\003rva\030\003 \001(\003\022\017\n\007fo"
    "rward\030\004 \001(\010\"C\n\nApiInvoked\022\023\n\013module_name"
    "\030\001 \001(\t\022\020\n\010api_name\030\002 \001(\t\022\016\n\006action\030\003 \001(\005", 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pipe.proto", &protobuf_RegisterTypes);
  Init::default_instance_ = new Init();
  ModuleFilter::default_instance_ = new ModuleFilter();
  ApiFilter::default_instance_ = new ApiFilter();
  ModuleApis::default_instance_ = new ModuleApis();
  ModuleApis_ApiDetail::default_instance_ = new ModuleApis_ApiDetail();
  ApiInvoked::default_instance_ = new ApiInvoked();
  Init::default_instance_->InitAsDefaultInstance();
  ModuleFilter::default_instance_->InitAsDefaultInstance();
  ApiFilter::default_instance_->InitAsDefaultInstance();
  ModuleApis::default_instance_->InitAsDefaultInstance();
  ModuleApis_ApiDetail::default_instance_->InitAsDefaultInstance();
  ApiInvoked::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pipe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pipe_2eproto {
  StaticDescriptorInitializer_pipe_2eproto() {
    protobuf_AddDesc_pipe_2eproto();
  }
} static_descriptor_initializer_pipe_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Init::kDummyFieldNumber;
#endif  // !_MSC_VER

Init::Init()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Init::InitAsDefaultInstance() {
}

Init::Init(const Init& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Init::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Init::~Init() {
  SharedDtor();
}

void Init::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Init::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Init_descriptor_;
}

const Init& Init::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

Init* Init::default_instance_ = NULL;

Init* Init::New() const {
  return new Init;
}

void Init::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Init::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Init::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Init* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Init*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Init::MergeFrom(const Init& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Init::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Init::CopyFrom(const Init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {

  return true;
}

void Init::Swap(Init* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Init::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Init_descriptor_;
  metadata.reflection = Init_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleFilter::kNameFieldNumber;
const int ModuleFilter::kFilterFieldNumber;
#endif  // !_MSC_VER

ModuleFilter::ModuleFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleFilter::InitAsDefaultInstance() {
}

ModuleFilter::ModuleFilter(const ModuleFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleFilter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleFilter::~ModuleFilter() {
  SharedDtor();
}

void ModuleFilter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModuleFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleFilter_descriptor_;
}

const ModuleFilter& ModuleFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

ModuleFilter* ModuleFilter::default_instance_ = NULL;

ModuleFilter* ModuleFilter::New() const {
  return new ModuleFilter;
}

void ModuleFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    filter_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter;
        break;
      }

      // optional bool filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_)));
          set_has_filter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool filter = 2;
    if (has_filter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleFilter::MergeFrom(const ModuleFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleFilter::CopyFrom(const ModuleFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleFilter::IsInitialized() const {

  return true;
}

void ModuleFilter::Swap(ModuleFilter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleFilter_descriptor_;
  metadata.reflection = ModuleFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApiFilter::kModuleNameFieldNumber;
const int ApiFilter::kApiNameFieldNumber;
const int ApiFilter::kFilterFieldNumber;
#endif  // !_MSC_VER

ApiFilter::ApiFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApiFilter::InitAsDefaultInstance() {
}

ApiFilter::ApiFilter(const ApiFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApiFilter::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  api_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiFilter::~ApiFilter() {
  SharedDtor();
}

void ApiFilter::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (api_name_ != &::google::protobuf::internal::kEmptyString) {
    delete api_name_;
  }
  if (this != default_instance_) {
  }
}

void ApiFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApiFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApiFilter_descriptor_;
}

const ApiFilter& ApiFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

ApiFilter* ApiFilter::default_instance_ = NULL;

ApiFilter* ApiFilter::New() const {
  return new ApiFilter;
}

void ApiFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_api_name()) {
      if (api_name_ != &::google::protobuf::internal::kEmptyString) {
        api_name_->clear();
      }
    }
    filter_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApiFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_api_name;
        break;
      }

      // optional string api_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_api_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->api_name().data(), this->api_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filter;
        break;
      }

      // optional bool filter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_)));
          set_has_filter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApiFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }

  // optional string api_name = 2;
  if (has_api_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->api_name().data(), this->api_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->api_name(), output);
  }

  // optional bool filter = 3;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApiFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  // optional string api_name = 2;
  if (has_api_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->api_name().data(), this->api_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->api_name(), target);
  }

  // optional bool filter = 3;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApiFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string api_name = 2;
    if (has_api_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_name());
    }

    // optional bool filter = 3;
    if (has_filter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApiFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApiFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApiFilter::MergeFrom(const ApiFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_api_name()) {
      set_api_name(from.api_name());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApiFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApiFilter::CopyFrom(const ApiFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiFilter::IsInitialized() const {

  return true;
}

void ApiFilter::Swap(ApiFilter* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(api_name_, other->api_name_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApiFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApiFilter_descriptor_;
  metadata.reflection = ApiFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleApis_ApiDetail::kNameFieldNumber;
const int ModuleApis_ApiDetail::kVaFieldNumber;
const int ModuleApis_ApiDetail::kRvaFieldNumber;
const int ModuleApis_ApiDetail::kForwardFieldNumber;
#endif  // !_MSC_VER

ModuleApis_ApiDetail::ModuleApis_ApiDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleApis_ApiDetail::InitAsDefaultInstance() {
}

ModuleApis_ApiDetail::ModuleApis_ApiDetail(const ModuleApis_ApiDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleApis_ApiDetail::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  va_ = GOOGLE_LONGLONG(0);
  rva_ = GOOGLE_LONGLONG(0);
  forward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleApis_ApiDetail::~ModuleApis_ApiDetail() {
  SharedDtor();
}

void ModuleApis_ApiDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModuleApis_ApiDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleApis_ApiDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleApis_ApiDetail_descriptor_;
}

const ModuleApis_ApiDetail& ModuleApis_ApiDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

ModuleApis_ApiDetail* ModuleApis_ApiDetail::default_instance_ = NULL;

ModuleApis_ApiDetail* ModuleApis_ApiDetail::New() const {
  return new ModuleApis_ApiDetail;
}

void ModuleApis_ApiDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    va_ = GOOGLE_LONGLONG(0);
    rva_ = GOOGLE_LONGLONG(0);
    forward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleApis_ApiDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_va;
        break;
      }

      // optional int64 va = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_va:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &va_)));
          set_has_va();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rva;
        break;
      }

      // optional int64 rva = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rva:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rva_)));
          set_has_rva();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_forward;
        break;
      }

      // optional bool forward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
          set_has_forward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleApis_ApiDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int64 va = 2;
  if (has_va()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->va(), output);
  }

  // optional int64 rva = 3;
  if (has_rva()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rva(), output);
  }

  // optional bool forward = 4;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->forward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleApis_ApiDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 va = 2;
  if (has_va()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->va(), target);
  }

  // optional int64 rva = 3;
  if (has_rva()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rva(), target);
  }

  // optional bool forward = 4;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->forward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleApis_ApiDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 va = 2;
    if (has_va()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->va());
    }

    // optional int64 rva = 3;
    if (has_rva()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rva());
    }

    // optional bool forward = 4;
    if (has_forward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleApis_ApiDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleApis_ApiDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleApis_ApiDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleApis_ApiDetail::MergeFrom(const ModuleApis_ApiDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_va()) {
      set_va(from.va());
    }
    if (from.has_rva()) {
      set_rva(from.rva());
    }
    if (from.has_forward()) {
      set_forward(from.forward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleApis_ApiDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleApis_ApiDetail::CopyFrom(const ModuleApis_ApiDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleApis_ApiDetail::IsInitialized() const {

  return true;
}

void ModuleApis_ApiDetail::Swap(ModuleApis_ApiDetail* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(va_, other->va_);
    std::swap(rva_, other->rva_);
    std::swap(forward_, other->forward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleApis_ApiDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleApis_ApiDetail_descriptor_;
  metadata.reflection = ModuleApis_ApiDetail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ModuleApis::kModuleNameFieldNumber;
const int ModuleApis::kApisFieldNumber;
#endif  // !_MSC_VER

ModuleApis::ModuleApis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleApis::InitAsDefaultInstance() {
}

ModuleApis::ModuleApis(const ModuleApis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleApis::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleApis::~ModuleApis() {
  SharedDtor();
}

void ModuleApis::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (this != default_instance_) {
  }
}

void ModuleApis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleApis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleApis_descriptor_;
}

const ModuleApis& ModuleApis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

ModuleApis* ModuleApis::default_instance_ = NULL;

ModuleApis* ModuleApis::New() const {
  return new ModuleApis;
}

void ModuleApis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
  }
  apis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleApis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apis;
        break;
      }

      // repeated .ModuleApis.ApiDetail apis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apis;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleApis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }

  // repeated .ModuleApis.ApiDetail apis = 2;
  for (int i = 0; i < this->apis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleApis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  // repeated .ModuleApis.ApiDetail apis = 2;
  for (int i = 0; i < this->apis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleApis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

  }
  // repeated .ModuleApis.ApiDetail apis = 2;
  total_size += 1 * this->apis_size();
  for (int i = 0; i < this->apis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleApis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleApis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleApis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleApis::MergeFrom(const ModuleApis& from) {
  GOOGLE_CHECK_NE(&from, this);
  apis_.MergeFrom(from.apis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleApis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleApis::CopyFrom(const ModuleApis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleApis::IsInitialized() const {

  return true;
}

void ModuleApis::Swap(ModuleApis* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    apis_.Swap(&other->apis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleApis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleApis_descriptor_;
  metadata.reflection = ModuleApis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApiInvoked::kModuleNameFieldNumber;
const int ApiInvoked::kApiNameFieldNumber;
const int ApiInvoked::kActionFieldNumber;
#endif  // !_MSC_VER

ApiInvoked::ApiInvoked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApiInvoked::InitAsDefaultInstance() {
}

ApiInvoked::ApiInvoked(const ApiInvoked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApiInvoked::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  api_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApiInvoked::~ApiInvoked() {
  SharedDtor();
}

void ApiInvoked::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (api_name_ != &::google::protobuf::internal::kEmptyString) {
    delete api_name_;
  }
  if (this != default_instance_) {
  }
}

void ApiInvoked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApiInvoked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApiInvoked_descriptor_;
}

const ApiInvoked& ApiInvoked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

ApiInvoked* ApiInvoked::default_instance_ = NULL;

ApiInvoked* ApiInvoked::New() const {
  return new ApiInvoked;
}

void ApiInvoked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_api_name()) {
      if (api_name_ != &::google::protobuf::internal::kEmptyString) {
        api_name_->clear();
      }
    }
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApiInvoked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_api_name;
        break;
      }

      // optional string api_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_api_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->api_name().data(), this->api_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional int32 action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApiInvoked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }

  // optional string api_name = 2;
  if (has_api_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->api_name().data(), this->api_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->api_name(), output);
  }

  // optional int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApiInvoked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  // optional string api_name = 2;
  if (has_api_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->api_name().data(), this->api_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->api_name(), target);
  }

  // optional int32 action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApiInvoked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string api_name = 2;
    if (has_api_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_name());
    }

    // optional int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApiInvoked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApiInvoked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApiInvoked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApiInvoked::MergeFrom(const ApiInvoked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_api_name()) {
      set_api_name(from.api_name());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApiInvoked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApiInvoked::CopyFrom(const ApiInvoked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiInvoked::IsInitialized() const {

  return true;
}

void ApiInvoked::Swap(ApiInvoked* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(api_name_, other->api_name_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApiInvoked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApiInvoked_descriptor_;
  metadata.reflection = ApiInvoked_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

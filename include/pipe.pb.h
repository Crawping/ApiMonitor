// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipe.proto

#ifndef PROTOBUF_pipe_2eproto__INCLUDED
#define PROTOBUF_pipe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pipe_2eproto();
void protobuf_AssignDesc_pipe_2eproto();
void protobuf_ShutdownFile_pipe_2eproto();

class Init;
class ModuleFilter;
class ApiFilter;
class ModuleApis;
class ModuleApis_ApiDetail;
class ApiInvoked;

// ===================================================================

class Init : public ::google::protobuf::Message {
 public:
  Init();
  virtual ~Init();

  Init(const Init& from);

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Init& default_instance();

  void Swap(Init* other);

  // implements Message ----------------------------------------------

  Init* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::int32 dummy() const;
  inline void set_dummy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Init)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dummy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pipe_2eproto();
  friend void protobuf_AssignDesc_pipe_2eproto();
  friend void protobuf_ShutdownFile_pipe_2eproto();

  void InitAsDefaultInstance();
  static Init* default_instance_;
};
// -------------------------------------------------------------------

class ModuleFilter : public ::google::protobuf::Message {
 public:
  ModuleFilter();
  virtual ~ModuleFilter();

  ModuleFilter(const ModuleFilter& from);

  inline ModuleFilter& operator=(const ModuleFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleFilter& default_instance();

  void Swap(ModuleFilter* other);

  // implements Message ----------------------------------------------

  ModuleFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleFilter& from);
  void MergeFrom(const ModuleFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool filter = 2;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 2;
  inline bool filter() const;
  inline void set_filter(bool value);

  // @@protoc_insertion_point(class_scope:ModuleFilter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool filter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pipe_2eproto();
  friend void protobuf_AssignDesc_pipe_2eproto();
  friend void protobuf_ShutdownFile_pipe_2eproto();

  void InitAsDefaultInstance();
  static ModuleFilter* default_instance_;
};
// -------------------------------------------------------------------

class ApiFilter : public ::google::protobuf::Message {
 public:
  ApiFilter();
  virtual ~ApiFilter();

  ApiFilter(const ApiFilter& from);

  inline ApiFilter& operator=(const ApiFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApiFilter& default_instance();

  void Swap(ApiFilter* other);

  // implements Message ----------------------------------------------

  ApiFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApiFilter& from);
  void MergeFrom(const ApiFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module_name = 1;
  inline bool has_module_name() const;
  inline void clear_module_name();
  static const int kModuleNameFieldNumber = 1;
  inline const ::std::string& module_name() const;
  inline void set_module_name(const ::std::string& value);
  inline void set_module_name(const char* value);
  inline void set_module_name(const char* value, size_t size);
  inline ::std::string* mutable_module_name();
  inline ::std::string* release_module_name();
  inline void set_allocated_module_name(::std::string* module_name);

  // optional string api_name = 2;
  inline bool has_api_name() const;
  inline void clear_api_name();
  static const int kApiNameFieldNumber = 2;
  inline const ::std::string& api_name() const;
  inline void set_api_name(const ::std::string& value);
  inline void set_api_name(const char* value);
  inline void set_api_name(const char* value, size_t size);
  inline ::std::string* mutable_api_name();
  inline ::std::string* release_api_name();
  inline void set_allocated_api_name(::std::string* api_name);

  // optional bool filter = 3;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 3;
  inline bool filter() const;
  inline void set_filter(bool value);

  // @@protoc_insertion_point(class_scope:ApiFilter)
 private:
  inline void set_has_module_name();
  inline void clear_has_module_name();
  inline void set_has_api_name();
  inline void clear_has_api_name();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* module_name_;
  ::std::string* api_name_;
  bool filter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pipe_2eproto();
  friend void protobuf_AssignDesc_pipe_2eproto();
  friend void protobuf_ShutdownFile_pipe_2eproto();

  void InitAsDefaultInstance();
  static ApiFilter* default_instance_;
};
// -------------------------------------------------------------------

class ModuleApis_ApiDetail : public ::google::protobuf::Message {
 public:
  ModuleApis_ApiDetail();
  virtual ~ModuleApis_ApiDetail();

  ModuleApis_ApiDetail(const ModuleApis_ApiDetail& from);

  inline ModuleApis_ApiDetail& operator=(const ModuleApis_ApiDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleApis_ApiDetail& default_instance();

  void Swap(ModuleApis_ApiDetail* other);

  // implements Message ----------------------------------------------

  ModuleApis_ApiDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleApis_ApiDetail& from);
  void MergeFrom(const ModuleApis_ApiDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 va = 2;
  inline bool has_va() const;
  inline void clear_va();
  static const int kVaFieldNumber = 2;
  inline ::google::protobuf::int64 va() const;
  inline void set_va(::google::protobuf::int64 value);

  // optional int64 rva = 3;
  inline bool has_rva() const;
  inline void clear_rva();
  static const int kRvaFieldNumber = 3;
  inline ::google::protobuf::int64 rva() const;
  inline void set_rva(::google::protobuf::int64 value);

  // optional bool forward = 4;
  inline bool has_forward() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 4;
  inline bool forward() const;
  inline void set_forward(bool value);

  // @@protoc_insertion_point(class_scope:ModuleApis.ApiDetail)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_va();
  inline void clear_has_va();
  inline void set_has_rva();
  inline void clear_has_rva();
  inline void set_has_forward();
  inline void clear_has_forward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 va_;
  ::google::protobuf::int64 rva_;
  bool forward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_pipe_2eproto();
  friend void protobuf_AssignDesc_pipe_2eproto();
  friend void protobuf_ShutdownFile_pipe_2eproto();

  void InitAsDefaultInstance();
  static ModuleApis_ApiDetail* default_instance_;
};
// -------------------------------------------------------------------

class ModuleApis : public ::google::protobuf::Message {
 public:
  ModuleApis();
  virtual ~ModuleApis();

  ModuleApis(const ModuleApis& from);

  inline ModuleApis& operator=(const ModuleApis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleApis& default_instance();

  void Swap(ModuleApis* other);

  // implements Message ----------------------------------------------

  ModuleApis* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleApis& from);
  void MergeFrom(const ModuleApis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModuleApis_ApiDetail ApiDetail;

  // accessors -------------------------------------------------------

  // optional string module_name = 1;
  inline bool has_module_name() const;
  inline void clear_module_name();
  static const int kModuleNameFieldNumber = 1;
  inline const ::std::string& module_name() const;
  inline void set_module_name(const ::std::string& value);
  inline void set_module_name(const char* value);
  inline void set_module_name(const char* value, size_t size);
  inline ::std::string* mutable_module_name();
  inline ::std::string* release_module_name();
  inline void set_allocated_module_name(::std::string* module_name);

  // repeated .ModuleApis.ApiDetail apis = 2;
  inline int apis_size() const;
  inline void clear_apis();
  static const int kApisFieldNumber = 2;
  inline const ::ModuleApis_ApiDetail& apis(int index) const;
  inline ::ModuleApis_ApiDetail* mutable_apis(int index);
  inline ::ModuleApis_ApiDetail* add_apis();
  inline const ::google::protobuf::RepeatedPtrField< ::ModuleApis_ApiDetail >&
      apis() const;
  inline ::google::protobuf::RepeatedPtrField< ::ModuleApis_ApiDetail >*
      mutable_apis();

  // @@protoc_insertion_point(class_scope:ModuleApis)
 private:
  inline void set_has_module_name();
  inline void clear_has_module_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* module_name_;
  ::google::protobuf::RepeatedPtrField< ::ModuleApis_ApiDetail > apis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pipe_2eproto();
  friend void protobuf_AssignDesc_pipe_2eproto();
  friend void protobuf_ShutdownFile_pipe_2eproto();

  void InitAsDefaultInstance();
  static ModuleApis* default_instance_;
};
// -------------------------------------------------------------------

class ApiInvoked : public ::google::protobuf::Message {
 public:
  ApiInvoked();
  virtual ~ApiInvoked();

  ApiInvoked(const ApiInvoked& from);

  inline ApiInvoked& operator=(const ApiInvoked& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApiInvoked& default_instance();

  void Swap(ApiInvoked* other);

  // implements Message ----------------------------------------------

  ApiInvoked* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApiInvoked& from);
  void MergeFrom(const ApiInvoked& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module_name = 1;
  inline bool has_module_name() const;
  inline void clear_module_name();
  static const int kModuleNameFieldNumber = 1;
  inline const ::std::string& module_name() const;
  inline void set_module_name(const ::std::string& value);
  inline void set_module_name(const char* value);
  inline void set_module_name(const char* value, size_t size);
  inline ::std::string* mutable_module_name();
  inline ::std::string* release_module_name();
  inline void set_allocated_module_name(::std::string* module_name);

  // optional string api_name = 2;
  inline bool has_api_name() const;
  inline void clear_api_name();
  static const int kApiNameFieldNumber = 2;
  inline const ::std::string& api_name() const;
  inline void set_api_name(const ::std::string& value);
  inline void set_api_name(const char* value);
  inline void set_api_name(const char* value, size_t size);
  inline ::std::string* mutable_api_name();
  inline ::std::string* release_api_name();
  inline void set_allocated_api_name(::std::string* api_name);

  // optional int32 action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ApiInvoked)
 private:
  inline void set_has_module_name();
  inline void clear_has_module_name();
  inline void set_has_api_name();
  inline void clear_has_api_name();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* module_name_;
  ::std::string* api_name_;
  ::google::protobuf::int32 action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pipe_2eproto();
  friend void protobuf_AssignDesc_pipe_2eproto();
  friend void protobuf_ShutdownFile_pipe_2eproto();

  void InitAsDefaultInstance();
  static ApiInvoked* default_instance_;
};
// ===================================================================


// ===================================================================

// Init

// optional int32 dummy = 1;
inline bool Init::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Init::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Init::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Init::clear_dummy() {
  dummy_ = 0;
  clear_has_dummy();
}
inline ::google::protobuf::int32 Init::dummy() const {
  return dummy_;
}
inline void Init::set_dummy(::google::protobuf::int32 value) {
  set_has_dummy();
  dummy_ = value;
}

// -------------------------------------------------------------------

// ModuleFilter

// optional string name = 1;
inline bool ModuleFilter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleFilter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleFilter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleFilter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModuleFilter::name() const {
  return *name_;
}
inline void ModuleFilter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModuleFilter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModuleFilter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleFilter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModuleFilter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleFilter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool filter = 2;
inline bool ModuleFilter::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleFilter::set_has_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleFilter::clear_has_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleFilter::clear_filter() {
  filter_ = false;
  clear_has_filter();
}
inline bool ModuleFilter::filter() const {
  return filter_;
}
inline void ModuleFilter::set_filter(bool value) {
  set_has_filter();
  filter_ = value;
}

// -------------------------------------------------------------------

// ApiFilter

// optional string module_name = 1;
inline bool ApiFilter::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApiFilter::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApiFilter::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApiFilter::clear_module_name() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    module_name_->clear();
  }
  clear_has_module_name();
}
inline const ::std::string& ApiFilter::module_name() const {
  return *module_name_;
}
inline void ApiFilter::set_module_name(const ::std::string& value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ApiFilter::set_module_name(const char* value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ApiFilter::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApiFilter::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  return module_name_;
}
inline ::std::string* ApiFilter::release_module_name() {
  clear_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_name_;
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApiFilter::set_allocated_module_name(::std::string* module_name) {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_name) {
    set_has_module_name();
    module_name_ = module_name;
  } else {
    clear_has_module_name();
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string api_name = 2;
inline bool ApiFilter::has_api_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApiFilter::set_has_api_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApiFilter::clear_has_api_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApiFilter::clear_api_name() {
  if (api_name_ != &::google::protobuf::internal::kEmptyString) {
    api_name_->clear();
  }
  clear_has_api_name();
}
inline const ::std::string& ApiFilter::api_name() const {
  return *api_name_;
}
inline void ApiFilter::set_api_name(const ::std::string& value) {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  api_name_->assign(value);
}
inline void ApiFilter::set_api_name(const char* value) {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  api_name_->assign(value);
}
inline void ApiFilter::set_api_name(const char* value, size_t size) {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  api_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApiFilter::mutable_api_name() {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  return api_name_;
}
inline ::std::string* ApiFilter::release_api_name() {
  clear_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = api_name_;
    api_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApiFilter::set_allocated_api_name(::std::string* api_name) {
  if (api_name_ != &::google::protobuf::internal::kEmptyString) {
    delete api_name_;
  }
  if (api_name) {
    set_has_api_name();
    api_name_ = api_name;
  } else {
    clear_has_api_name();
    api_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool filter = 3;
inline bool ApiFilter::has_filter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApiFilter::set_has_filter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApiFilter::clear_has_filter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApiFilter::clear_filter() {
  filter_ = false;
  clear_has_filter();
}
inline bool ApiFilter::filter() const {
  return filter_;
}
inline void ApiFilter::set_filter(bool value) {
  set_has_filter();
  filter_ = value;
}

// -------------------------------------------------------------------

// ModuleApis_ApiDetail

// optional string name = 1;
inline bool ModuleApis_ApiDetail::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleApis_ApiDetail::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleApis_ApiDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleApis_ApiDetail::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModuleApis_ApiDetail::name() const {
  return *name_;
}
inline void ModuleApis_ApiDetail::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModuleApis_ApiDetail::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModuleApis_ApiDetail::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleApis_ApiDetail::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModuleApis_ApiDetail::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleApis_ApiDetail::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 va = 2;
inline bool ModuleApis_ApiDetail::has_va() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleApis_ApiDetail::set_has_va() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleApis_ApiDetail::clear_has_va() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleApis_ApiDetail::clear_va() {
  va_ = GOOGLE_LONGLONG(0);
  clear_has_va();
}
inline ::google::protobuf::int64 ModuleApis_ApiDetail::va() const {
  return va_;
}
inline void ModuleApis_ApiDetail::set_va(::google::protobuf::int64 value) {
  set_has_va();
  va_ = value;
}

// optional int64 rva = 3;
inline bool ModuleApis_ApiDetail::has_rva() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleApis_ApiDetail::set_has_rva() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleApis_ApiDetail::clear_has_rva() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleApis_ApiDetail::clear_rva() {
  rva_ = GOOGLE_LONGLONG(0);
  clear_has_rva();
}
inline ::google::protobuf::int64 ModuleApis_ApiDetail::rva() const {
  return rva_;
}
inline void ModuleApis_ApiDetail::set_rva(::google::protobuf::int64 value) {
  set_has_rva();
  rva_ = value;
}

// optional bool forward = 4;
inline bool ModuleApis_ApiDetail::has_forward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleApis_ApiDetail::set_has_forward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleApis_ApiDetail::clear_has_forward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleApis_ApiDetail::clear_forward() {
  forward_ = false;
  clear_has_forward();
}
inline bool ModuleApis_ApiDetail::forward() const {
  return forward_;
}
inline void ModuleApis_ApiDetail::set_forward(bool value) {
  set_has_forward();
  forward_ = value;
}

// -------------------------------------------------------------------

// ModuleApis

// optional string module_name = 1;
inline bool ModuleApis::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleApis::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleApis::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleApis::clear_module_name() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    module_name_->clear();
  }
  clear_has_module_name();
}
inline const ::std::string& ModuleApis::module_name() const {
  return *module_name_;
}
inline void ModuleApis::set_module_name(const ::std::string& value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ModuleApis::set_module_name(const char* value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ModuleApis::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleApis::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  return module_name_;
}
inline ::std::string* ModuleApis::release_module_name() {
  clear_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_name_;
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleApis::set_allocated_module_name(::std::string* module_name) {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_name) {
    set_has_module_name();
    module_name_ = module_name;
  } else {
    clear_has_module_name();
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ModuleApis.ApiDetail apis = 2;
inline int ModuleApis::apis_size() const {
  return apis_.size();
}
inline void ModuleApis::clear_apis() {
  apis_.Clear();
}
inline const ::ModuleApis_ApiDetail& ModuleApis::apis(int index) const {
  return apis_.Get(index);
}
inline ::ModuleApis_ApiDetail* ModuleApis::mutable_apis(int index) {
  return apis_.Mutable(index);
}
inline ::ModuleApis_ApiDetail* ModuleApis::add_apis() {
  return apis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ModuleApis_ApiDetail >&
ModuleApis::apis() const {
  return apis_;
}
inline ::google::protobuf::RepeatedPtrField< ::ModuleApis_ApiDetail >*
ModuleApis::mutable_apis() {
  return &apis_;
}

// -------------------------------------------------------------------

// ApiInvoked

// optional string module_name = 1;
inline bool ApiInvoked::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApiInvoked::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApiInvoked::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApiInvoked::clear_module_name() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    module_name_->clear();
  }
  clear_has_module_name();
}
inline const ::std::string& ApiInvoked::module_name() const {
  return *module_name_;
}
inline void ApiInvoked::set_module_name(const ::std::string& value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ApiInvoked::set_module_name(const char* value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void ApiInvoked::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApiInvoked::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  return module_name_;
}
inline ::std::string* ApiInvoked::release_module_name() {
  clear_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_name_;
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApiInvoked::set_allocated_module_name(::std::string* module_name) {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_name) {
    set_has_module_name();
    module_name_ = module_name;
  } else {
    clear_has_module_name();
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string api_name = 2;
inline bool ApiInvoked::has_api_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApiInvoked::set_has_api_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApiInvoked::clear_has_api_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApiInvoked::clear_api_name() {
  if (api_name_ != &::google::protobuf::internal::kEmptyString) {
    api_name_->clear();
  }
  clear_has_api_name();
}
inline const ::std::string& ApiInvoked::api_name() const {
  return *api_name_;
}
inline void ApiInvoked::set_api_name(const ::std::string& value) {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  api_name_->assign(value);
}
inline void ApiInvoked::set_api_name(const char* value) {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  api_name_->assign(value);
}
inline void ApiInvoked::set_api_name(const char* value, size_t size) {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  api_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApiInvoked::mutable_api_name() {
  set_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    api_name_ = new ::std::string;
  }
  return api_name_;
}
inline ::std::string* ApiInvoked::release_api_name() {
  clear_has_api_name();
  if (api_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = api_name_;
    api_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApiInvoked::set_allocated_api_name(::std::string* api_name) {
  if (api_name_ != &::google::protobuf::internal::kEmptyString) {
    delete api_name_;
  }
  if (api_name) {
    set_has_api_name();
    api_name_ = api_name;
  } else {
    clear_has_api_name();
    api_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 action = 3;
inline bool ApiInvoked::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApiInvoked::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApiInvoked::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApiInvoked::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 ApiInvoked::action() const {
  return action_;
}
inline void ApiInvoked::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pipe_2eproto__INCLUDED
